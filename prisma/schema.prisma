// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  username            String             @unique
  email               String             @unique
  password            String
  image               String?
  points              Int                @default(0)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  challengesCompleted Int                @default(0)
  battlesWon          Int                @default(0)
  battlesLost         Int                @default(0)
  battlesAsPlayer1    Battle[]           @relation("Player1")
  battlesAsPlayer2    Battle[]           @relation("Player2")
  challengeAttempts   ChallengeAttempt[]
}

model Challenge {
  id            String             @id @default(cuid())
  teamsJson     String // JSON string of teams the player has played for
  correctAnswer String // Player name
  difficulty    Int                @default(1) // 1-5 scale
  points        Int                @default(10)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  attempts      ChallengeAttempt[]
}

model ChallengeAttempt {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  challenge    Challenge @relation(fields: [challengeId], references: [id])
  challengeId  String
  completed    Boolean   @default(false)
  correct      Boolean   @default(false)
  attemptsUsed Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, challengeId])
}

model Battle {
  id           String        @id @default(cuid())
  player1      User          @relation("Player1", fields: [player1Id], references: [id])
  player1Id    String
  player2      User          @relation("Player2", fields: [player2Id], references: [id])
  player2Id    String
  player1Score Int           @default(0)
  player2Score Int           @default(0)
  winnerId     String? // ID of the winning player
  status       BattleStatus  @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rounds       BattleRound[]
}

model BattleRound {
  id             String   @id @default(cuid())
  battle         Battle   @relation(fields: [battleId], references: [id])
  battleId       String
  roundNumber    Int
  teamsJson      String // JSON string of teams the player has played for
  correctAnswer  String // Player name
  player1Guess   String?
  player2Guess   String?
  player1Correct Boolean  @default(false)
  player2Correct Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([battleId, roundNumber])
}

enum BattleStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
